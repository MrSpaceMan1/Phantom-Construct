from enum import Enum
from typing import TextIO

import discord
import datetime

from my_bot import MyBot


async def time_out(user: discord.Member, message: str, time: datetime.timedelta) -> None:...
async def kick(user: discord.Member, message: str) -> None: ...
async def ban(user: discord.Member, message: str) -> None:...

class WarningLevel:
    def __init__(self, action: DisciplinaryActions, message: str, **kwargs:...):
        self.message:str = ...
        self.params:... = ...
        ...
    async def __call__(self, user: discord.Member) -> None:...
    async def action(self, user: discord.Member, message: str, **kwargs:...):...


class DisciplinaryActions(Enum):
    TIMEOUT = time_out
    KICK = kick
    BAN = ban

class WarningSystem:
    def __init__(self, bot: MyBot):
        self.__warning: dict[str, int] = ...
        self.__levels: list[WarningLevel] = ...
        self.bot: MyBot = ...
        ...
    def __getitem__(self, key: str) -> int:...
    def __setitem__(self, key: str, value: int) -> None:...
    def __call__(self, *args, **kwargs) -> dict[str, int]:...
    def load(self, file: TextIO) -> None:...
    def add_action(self, action: DisciplinaryActions, message: str = "", **kwargs:...):...
    @property
    def warnings(self) -> dict[str, int]:...
    async def issue(self, user: discord.Member, guild: discord.Guild) -> None:...
    async def retract(self, user: discord.User) -> None:...